{"version":3,"sources":["components/ScoreBoard.js","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","images/blank.png","App.js","index.js"],"names":["ScoreBoard","_ref","score","_jsx","className","children","candyColors","blueCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","greenCandy","App","currentColorArrangement","setCurrentColorArrangement","useState","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","width","decidedColor","isBlank","blank","every","square","forEach","checkForRowOfFour","rowOfFour","notValid","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","useEffect","createBoard","randomColorArrangement","randomColor","push","timer","setInterval","clearInterval","_jsxs","map","candyColor","index","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.959bb254.chunk.js","sourcesContent":["const ScoreBoard = ({ score }) => {\n  return (\n    <div className=\"score-board\">\n      <h2>{score}</h2>\n    </div>\n  )\n}\n\nexport default ScoreBoard","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","import {useEffect, useState} from 'react'\nimport ScoreBoard from './components/ScoreBoard'\nimport blueCandy from './images/blue-candy.png'\nimport greenCandy from './images/green-candy.png'\nimport orangeCandy from './images/orange-candy.png'\nimport purpleCandy from './images/purple-candy.png'\nimport redCandy from './images/red-candy.png'\nimport yellowCandy from './images/yellow-candy.png'\nimport blank from './images/blank.png'\n\nconst width = 8\nconst candyColors = [\n    blueCandy,\n    orangeCandy,\n    purpleCandy,\n    redCandy,\n    yellowCandy,\n    greenCandy\n]\n\nconst App = () => {\n    const [currentColorArrangement, setCurrentColorArrangement] = useState([])\n    const [squareBeingDragged, setSquareBeingDragged] = useState(null)\n    const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\n    const [scoreDisplay, setScoreDisplay] = useState(0)\n\n    const checkForColumnOfFour = () => {\n        for (let i = 0; i <= 39; i++) {\n            const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\n            const decidedColor = currentColorArrangement[i]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 4)\n                columnOfFour.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const checkForRowOfFour = () => {\n        for (let i = 0; i < 64; i++) {\n            const rowOfFour = [i, i + 1, i + 2, i + 3]\n            const decidedColor = currentColorArrangement[i]\n            const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (notValid.includes(i)) continue\n\n            if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 4)\n                rowOfFour.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const checkForColumnOfThree = () => {\n        for (let i = 0; i <= 47; i++) {\n            const columnOfThree = [i, i + width, i + width * 2]\n            const decidedColor = currentColorArrangement[i]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 3)\n                columnOfThree.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const checkForRowOfThree = () => {\n        for (let i = 0; i < 64; i++) {\n            const rowOfThree = [i, i + 1, i + 2]\n            const decidedColor = currentColorArrangement[i]\n            const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n            const isBlank = currentColorArrangement[i] === blank\n\n            if (notValid.includes(i)) continue\n\n            if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n                setScoreDisplay((score) => score + 3)\n                rowOfThree.forEach(square => currentColorArrangement[square] = blank)\n                return true\n            }\n        }\n    }\n\n    const moveIntoSquareBelow = () => {\n        for (let i = 0; i <= 55; i++) {\n            const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n            const isFirstRow = firstRow.includes(i)\n\n            if (isFirstRow && currentColorArrangement[i] === blank) {\n                let randomNumber = Math.floor(Math.random() * candyColors.length)\n                currentColorArrangement[i] = candyColors[randomNumber]\n            }\n\n            if ((currentColorArrangement[i + width]) === blank) {\n                currentColorArrangement[i + width] = currentColorArrangement[i]\n                currentColorArrangement[i] = blank\n            }\n        }\n    }\n\n    const dragStart = (e) => {\n        setSquareBeingDragged(e.target)\n    }\n    const dragDrop = (e) => {\n        setSquareBeingReplaced(e.target)\n    }\n    const dragEnd = () => {\n        const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\n        const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n\n        currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\n        currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\n\n        const validMoves = [\n            squareBeingDraggedId - 1,\n            squareBeingDraggedId - width,\n            squareBeingDraggedId + 1,\n            squareBeingDraggedId + width\n        ]\n\n        const validMove = validMoves.includes(squareBeingReplacedId)\n\n        const isAColumnOfFour = checkForColumnOfFour()\n        const isARowOfFour = checkForRowOfFour()\n        const isAColumnOfThree = checkForColumnOfThree()\n        const isARowOfThree = checkForRowOfThree()\n\n        if (squareBeingReplacedId &&\n            validMove &&\n            (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\n            setSquareBeingDragged(null)\n            setSquareBeingReplaced(null)\n        } else {\n            currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n            currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\n            setCurrentColorArrangement([...currentColorArrangement])\n        }\n    }\n\n\n    const createBoard = () => {\n        const randomColorArrangement = []\n        for (let i = 0; i < width * width; i++) {\n            const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n            randomColorArrangement.push(randomColor)\n        }\n        setCurrentColorArrangement(randomColorArrangement)\n    }\n\n    useEffect(() => {\n        createBoard()\n    }, [])\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            checkForColumnOfFour()\n            checkForRowOfFour()\n            checkForColumnOfThree()\n            checkForRowOfThree()\n            moveIntoSquareBelow()\n            setCurrentColorArrangement([...currentColorArrangement])\n        }, 100)\n        return () => clearInterval(timer)\n    }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\n\n\n    return (\n        <div className=\"app\">\n            <div className=\"game\">\n                {currentColorArrangement.map((candyColor, index) => (\n                    <img\n                        key={index}\n                        src={candyColor}\n                        alt={candyColor}\n                        data-id={index}\n                        draggable={true}\n                        onDragStart={dragStart}\n                        onDragOver={(e) => e.preventDefault()}\n                        onDragEnter={(e) => e.preventDefault()}\n                        onDragLeave={(e) => e.preventDefault()}\n                        onDrop={dragDrop}\n                        onDragEnd={dragEnd}\n                    />\n                ))}\n            </div>\n            <ScoreBoard score={scoreDisplay}/>\n        </div>\n    )\n}\n\nexport default App\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}